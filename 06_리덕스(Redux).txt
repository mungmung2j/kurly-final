리덕스(Redux) & 리액트-리덕스(React-Redux)

설치
npm  i  redux@4.1.2
npm  i  react-redux

Middleware
npm  i  redux-logger



스테이트(State 상태관리)
리듀서(Reducer)
액션(Action)
디스패치(Dispatch)
미들웨어(Middleware)





"Redux"란 무엇인가요?
Redux는 실제로 다음과 같습니다:

"전역" 상태를 포함하는 단일 스토어
앱에 어떤 일이 일어날 때 스토어에 일반 
객체 액션을 디스패치하는 것
액션을 살펴보고 불변성을 유지한 채 
업데이트된 상태를 반환하는 순수 리듀서 함수
필수는 아니지만, Redux 코드에는 
보통 아래 항목들이 포함됩니다.:

액션 객체를 생성하는 액션 생성자
부수 효과를 가능하게 하는 미들웨어
부수 효과를 가진 동기 또는 
비동기 로직을 포함하는 Thunk 함수(redux-thunk)
ID로 항목 조회를 가능하게 하는 정규화된 상태
Reselect 라이브러리를 사용하여 파생된 데이터를 
최적화하는 메모이제이션된 셀렉터 함수
액션의 이력과 상태 변경을 확인할 수 있는 
Redux DevTools 확장 프로그램
액션, 상태 및 기타 함수에 대한 TypeScript 타입
추가적으로, Redux는 
보통 React-Redux 라이브러리와 함께 사용되어 
React 컴포넌트가 Redux 스토어와 상호 작용할 수 있게 합니다.


Redux 코어는 무엇을 하나요?
Redux 코어는 매우 작고 의도적으로 주관적이지 않은 라이브러리입니다. 이는 몇 가지 작은 API 기본 요소를 제공합니다:

createStore는 실제 Redux 스토어를 생성합니다
combineReducers는 여러 개의 slice리듀서를 하나의 큰 리듀서로 결합합니다
applyMiddleware는 여러 개의 미들웨어를 스토어 인핸서(enhancer)로 결합합니다
compose는 여러 개의 스토어 인핸서를 하나의 스토어 인핸서로 결합합니다


[1]. 리덕스 응용 실습 

1. 카운터 프로그래밍
- 버튼을 클릭하면 1씩 증가(increment)하는 카운터프로그램 구현
- 버튼을 클릭하면 1씩 감소(decrement)하는 카운터프로그램 구현
- 증가와 감소 결과를 보여주는 출력 구현

# 목표
- 리덕스의 설치와 기본구현 목적
- 리듀서 함수(reducer) 만들기
- 타입(aype), 액션(action) 구현하기
- 스토어(atrore) 생성하기
- 디스패치(dispatch => useDispatch()) 사용하기
- 셀렉터(selector => useSelector()) 사용하기
- 미들웨어(Middleware => redux-logger) 사용하기

2. 연산(계산) 프로그래밍
- 입력상자 2개
- 입력받은 값을 사칙연산하는 프로그래밍
- 덧셈(add)
- 뺄셈(subtract)
- 곱셈(multiply)
- 나눗셈(divide)

# 목표
- 리덕스의 설치와 기본구현 목적
- 리듀서 함수(reducer) 만들기
- 타입(aype), 액션(action) 구현하기
- 스토어(atrore) 생성하기
- 디스패치(dispatch => useDispatch()) 사용하기
- 셀렉터(selector => useSelector()) 사용하기
- 미들웨어(Middleware => redux-logger) 사용하기
- 모듈화(module)하기(익스포트 export)
- 모듈화(module)하기(임포트 import)


3. 실전 실습 : 마켓컬리 모든 전역상태관리의 리듀서를 모듈화하기


########## 리덕스 툴킷 #####################################
설치1
npm  i  @reduxjs/toolkit
npm  i  react-redux

설치2
npm  i  @reduxjs/toolkit  react-redux

index.js 임포트

import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';







